<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="openFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAD9bqwA5VacGRmGwSF93wYpmfcakZn3GuWZ9xstmfcbZZn3G5WZ9xu5mfcb1Zn3G+mZ9
        xv1mfcb+Zn3G/mZ9xv1mfcb6Zn3G9WZ9xu5mfcblZn3G2WZ9xstmfca5Zn3GpGZ9xolmfcZGZn3GBWZ9
        xgAAAAAAAAAAAAAAAABBXKwAQl2tAj5aqnBSa7juZXzF/2Z9xv9mfcb/Zn3G/2Z9xv9mfcb/Zn3G/2Z9
        xv9mfcb/Zn3G/2Z9xv9mfcb/Zn3G/2Z9xv9mfcb/Zn3G/2Z9xv9mfcb/Zn3G/2Z9xv9mfcb/Zn3G/2Z9
        xu1mfcZtZn3GAWZ9xgAAAAAAAAAAAD9aqwA9WaooQVyt4l52wf9mfcb/ZXzG/2V8xv9kfMX/ZHvF/2R7
        xf9ke8X/Y3vF/2N7xf9je8X/Y3vF/2N7xf9je8X/Y3vF/2N7xf9ke8X/ZHvF/2R7xf9kfMX/ZXzG/2V8
        xv9mfcb/Zn3G/2Z9xuFmfcYmZn3GAAAAAAAAAAAAPlmqAD1ZqkxDXq76YnnD/2d+x/9yh8r/eo7N/4GU
        z/+ImtH/j6DT/5Wl1f+aqdf/nqzY/6Cu2f+hr9n/oa/Z/6Cu2f+erNj/mqnX/5Wl1f+PoNP/iJrR/4GU
        z/96js3/cofK/2d+xv9mfcb/Zn3G+WZ9xkpmfcYAAAAAAAAAAAA9WaoAPVmqXUVgr/5iecT/mKfW/+Dk
        7v/r7fL/8fP1//X29v/4+ff/+fr4//n59v/5+fb/+fn2//r69v/6+vb/+fn2//n59v/4+Pb/9/f1//X2
        9f/z9PT/7/Dz/+ns8f/g5O7/mKfW/2V8xv9mfcb+Zn3GW2Z9xgAAAAAAAAAAAD1ZqgA9WaptR2Kx/2R7
        xf/ByeT//v34/+Pj4P+3t7X/sbCu/7Cwrv/IyMb/9PTx//r69//6+vf/+vr3//r69//6+vf/+vr3//r6
        9//6+vf/+fn2//n59v/6+vb/+vr2//389//AyeT/Zn3G/2Z9xv9mfcZqZn3GAAAAAABYcb4APFipAD1Y
        qntIY7L/Z37G/8rS5//s7Oj/h4eG/5OUkv+Qnpb/oKKg/4CAgP+2trX/+Pj1/+7u6//t7er/7e3q/+3t
        6v/t7er/7e3q/+3t6v/29vP/+fn2//n59v/5+fb/+/v3/8nQ5v9ofsf/Zn3G/2Z9xnlmfcYAa3vMAEdi
        sQA6V6gAPFmqiEpks/9qgMf/09nr/9PSz/+Ih4f/zejX/3LTof/T8d//xsTD/5CQj//b29n/ioqJ/4SE
        g/+EhIP/hISD/4SEg/+EhIP/hoaF/9TU0f/7+/j/+fn2//n59v/7+/f/0dfp/2qAx/9mfcb/Zn3GhWZ9
        xgBmfcYASWKyADZTpQA8WKqTS2a0/22DyP/a3+3/0M/M/4iLiP+N1q//edSk/4vasP/CyML/j46N//Hx
        7v/g4N7/3t7c/97e3P/e3tz/3t7c/97e3P/f393/8vLv//r69//6+vf/+vr3//v79//X3Ov/bYPI/2Z9
        xv9mfcaRZn3GAGZ9xgBEX68AHDuRADxYqpxNZ7X/cIXJ/9/j7//S0c7/goaD/7zkzv/m9ev/jN2y/4S1
        m/+RkJD/6+vo/6qqqf+dnZz/np6d/56enf+enp3/np6d/56enf+dnZz/nZ2b/5ycmv+7u7n/+fn1/93h
        7f9vhcn/ZX3G/2Z9xppmfcYAZn3GAERgsABPabcBPVmqpU5otv9ziMr/4ubv/+np5v+EhIP/nZyb/66s
        q/+KqJj/U61//6u8sv/y8u//wMC+/7a2tP+3t7X/t7e1/7e3tf+3t7X/t7e1/7e3tf+3t7X/tra0/83N
        y//6+fb/4eXu/3KHyv9lfMb/Zn3GomZ9xgFmfcYAQVysAENfrgI8WKqqT2i2/3WKy//k5+//+/v3/9/f
        3f+wsK7/qain/6ysqv+OzKv/tubL//z6+P/8/Pn//Pz5//z8+f/8/Pn//Pz5//z8+f/8/Pn//Pz5//z8
        +f/8/Pn/+/v4//r69//k5+//dYrL/2V8xv9mfcaoZn3GAmZ9xgBDXq4ARWCvBD1ZqrBPabf/eIzM/+fq
        8P/7+vf/19fV/6Wlo/+gn57/n56d/62zrv/j7OT/+vr3//v79//7+/f/+/v3//v79//7+/f/+/v3//v7
        9//5+fb/+fn2//n59v/5+fb/+vr2/+bp8P93i8z/ZXzG/2Z9xq1mfcYDZn3GAENfrgBEX68FPVmqs1Bp
        t/95jc3/6uzy/+bm4/+BgYD/oqWi/5euof+ytbL/iYiI/62sq//19fL/4uLf/+Dg3f/g4N3/4ODd/+Dg
        3f/g4N3/4eHe//Ly7//5+fb/+fn2//n59v/6+vb/6Ovx/3mNzP9lfMb/Zn3GsGZ9xgRmfcYAQl2uAENe
        rgU9Waq1UGq3/3uPzf/s7vP/0NDN/4uJif/G59T/Z9Ca/8rv2v/KyMf/j4+O/9ra2P+JiYn/g4OD/4OD
        g/+Dg4P/g4OD/4ODg/+FhYX/09PR//v7+P/5+fb/+fn2//r69v/p7PH/eo7N/2V8xv9mfcayZn3GBWZ9
        xgBCXa0AQ16uBT1ZqrVQarf/e4/N/+zv8//Pz8z/h4qH/4nVrf+J2K7/hNis/7zGv/+Pjo3/8/Pw/+rq
        5//o6OX/6Ojl/+jo5f/o6OX/6Ojl/+np5v/y8u//9vbz//b28//39/T/+vr2/+rs8f97j83/ZXzG/2Z9
        xrJmfcYFZn3GAENergBEXq4FPVmqtFBqt/97j83/7O/z/9PS0P+BhIL/x+TT/+327/+T3rb/ebKU/5OS
        kf/p6ef/nJya/42NjP+Ojo3/jo6N/46Ojf+Ojo3/jo6N/42NjP+NjYz/i4uK/7Cwrv/4+PT/6u3x/3uP
        zf9lfMb/Zn3GsWZ9xgRmfcYARF+vAEVgsAU9WaqyT2m3/3uPzf/q7fL/7e3q/42NjP+OjYz/m5qZ/4Oa
        jf9Tr4D/r8a4//b08v/R0c//ysrI/8rKyP/Kysj/ysrI/8rKyP/Kysj/ysrI/8rKyP/Jycf/2trY//n5
        9v/q7PH/eo7N/2V8xv9mfcavZn3GBGZ9xgBCXa0AQ1+uAzxZqq1Pabf/eo7N/+nr8f/7+/f/6urn/8HB
        v/+5uLf/vLu6/5/Tt/+66c//+/r4//v7+P/8/Pj//Pz4//z8+P/8/Pj//Pz4//z8+P/8/Pj//Pz4//z8
        +P/7+/f/+vr2/+nr8f95jcz/ZXzG/2Z9xqtmfcYDZn3GAEJdrQBGYbECPVmqqE5otv94jMz/5+rw//r5
        9v/IyMb/lJST/5KRkP+QkI//oKKf/+Lm4v/7+vj/+/v4//v7+P/7+/j/+/v4//v7+P/7+/j/+/v4//r6
        9//5+fb/+fn2//n59v/6+vb/5+rw/3eMzP9lfMb/Zn3GpmZ9xgFmfcYARV+vAGN1wgA9WKqhTWe1/3aK
        y//m6fH/4eHe/35+ff+yt7L/mr2p/8PIw/+UlJP/pKSi//Hx7v/T09D/0NDN/9DQzf/Q0M3/0NDN/9DQ
        zf/R0c7/7e3q//r69//5+fb/+fn2//r69v/l6O//dYrL/2V8xv9mfcafZn3GAGZ9xgBFYK8AL02hADxZ
        qplMZrT/c4jK/+To8f/Qz8z/jIuK/7zlzv9gzpX/v+vS/8zKyf+Pj47/3Nza/5GRkP+Li4r/i4uK/4uL
        iv+Li4r/i4uK/42NjP/X19T//Pz5//r69//5+fb/+vr2/+Hl7v9ziMr/ZXzG/2Z9xpZmfcYAZn3GAElk
        swA5VacAPFiqjktltP9whcn/4OTv/9DPzP+Fiof/idat/5veuv9/16n/tcS6/4+Ojf/09PH/7Ozp/+np
        5v/p6eb/6enm/+np5v/p6eb/6enm/+3t6v/u7uv/7u7r//Ly7//7+vf/3eLt/3CFyf9lfMb/Zn3GjGZ9
        xgBmfcYATGa0ADtXqQA8WaqCSWSy/22DyP/b4O3/1tbS/3+BgP/O4NT/7/Pu/5ncuP9vr47/lpaV/+jo
        5v+Tk5L/hISD/4WFhP+FhYT/hYWE/4WFhP+FhYT/hISE/4SEhP+CgoL/qqqo//n59f/Y3uv/bYPI/2Z9
        xv9mfcaAZn3GAGZ8xgAAAAAAPFipADxZqnVIYrH/aYDH/9PZ6v/z8+7/mJiX/4OCgv+Ni4v/fY6E/1aw
        gv+xz77/+Pf0/+Dg3f/c3Nn/3NzZ/9zc2f/c3Nn/3NzZ/9zc2f/c3Nn/3NzZ/9zc2f/m5uT/+/v2/9LY
        6f9qgcf/Zn3G/2Z9xnJmfcYAAAAAAAAAAAA9WaoAPFmqZkZhsP9mfcX/y9Ln//z8+P/x8e7/1dXS/8/P
        zP/S0c//s9zE/8Lq0v/9+vf//fv4//37+P/9+/j//fv4//37+P/9+/j//fv4//z7+P/7+/j/+/v4//r6
        9//7+/f/ytLn/2h/x/9mfcb/Zn3GZGZ9xgAAAAAAAAAAAD1ZqgA9WapWRF+v/WN6xP/Dy+T//Pz3//r6
        9//7+/j//Pv4/+729//d7/X/1fP1/9b09v/X9Pb/1/T2/9f09v/X9Pb/1vT2/9b09v/Y9Pb/6ff2//r5
        9v/5+fb/+fn2//z89//Cy+T/Zn3G/2Z9xvxmfcZUZn3GAAAAAAAAAAAAPlqrAD1ZqkBCXq71YHfC/6Wy
        2//v8fP/9PX0//j49f/X6/T/hsru/2HR8f9V2/P/VNzz/1Hf9P9R3/T/Ud/0/1Hf9P9U3PP/VNvz/1Hf
        9P9p4/T/0PL2//n49f/09fT/7/Hz/6Sx2v9lfMb/Zn3G9GZ9xj5mfcYAAAAAAAAAAAA/W6wAPlqrEj9b
        rL5Zcr3/bILI/4CTz/+MndL/lqbW/4G65v9kwu3/U9Dx/3DI7v9syO7/S9fy/0Td9P9E3fT/S9fy/2zI
        7v9wyO7/TtXy/0Le9f9qzuv/lqbW/4yd0v+BlM//a4HI/2Z9xv9mfca8Zn3GEWZ9xgAAAAAAAAAAAENe
        rgA9WaoAPVmqL0xmtK9iesTkZHzF72R7xfZjfMb7aKrg/2XE7v9bye//ptXw/5vR7/9T0PH/RN70/0Te
        9P9T0PH/m9Hv/6bV8P9YzPD/RN/1/06+5f9jfMb7ZHvF92R7xe9mfcbjZn3GrWZ9xi5mfcYAZn3GAAAA
        AAAAAAAAAAAAADtXqQBGYbAAPFipClx0vyJmfcYyZn3GQWZ9xk9qtOazZ8Lt/1PR8f9oye7/Zcnv/0vY
        8/9F3fT/Rd30/0vY8/9lye//aMju/03W8v9E3vT/Ss7tsWZ9xk9mfcZBZn3GMmZ9xiJmfcYJZn3GAGZ9
        xgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABdy+4Aar7sAGq/7DVqvuzTWc3w/0ja
        8/9H2/T/Rd30/0Xd9P9F3fT/Rd30/0fb9P9H2/P/Rd30/0Xd9NFF3fQzRd30AEbe8gAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA4AAAB8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA4AA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAADwAAAA8AAAAPAAAADwAAAA8AA
        AAPAAAADwAAAA8AAAAPgAAAH8AAAD/+AAf8=
</value>
  </data>
</root>